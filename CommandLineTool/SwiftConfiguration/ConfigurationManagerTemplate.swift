//
//  ConfigurationManagerTemplate.swift
//  SwiftConfigCore
//
//  Created by Piotr Gorzelany on 25/04/2019.
//  Copyright Â© 2019 Apify. All rights reserved.
//

import Foundation

class ConfigurationManagerTemplate {

    private let configurationKey: String
    private let configurationsString: String
    private let configurationsKeysString: String

    lazy var configurationManagerString = #"""
    // This file is autogenerated. Do not modify!

    import Foundation

    class ConfigurationManager {

        enum Configuration: String {
            \#(configurationsString)
        }

        enum ConfigurationKey: String {
            \#(configurationsKeysString)
        }

        // MARK: Shared instance

        static let shared = ConfigurationManager()

        // MARK: Properties

        private let configurationKey = "\#(configurationKey)"
        private let configurationDictionaryName = "Configuration"

        let activeConfiguration: Configuration
        private let activeConfigurationDictionary: NSDictionary

        // MARK: Lifecycle

        init () {
            let bundle = Bundle(for: ConfigurationManager.self)
            guard let rawConfiguration = bundle.object(forInfoDictionaryKey: configurationKey) as? String,
                let activeConfiguration = Configuration(rawValue: rawConfiguration),
                let configurationDictionaryPath = bundle.path(forResource: configurationDictionaryName, ofType: "plist"),
                let configurationDictionary = NSDictionary(contentsOfFile: configurationDictionaryPath),
                let activeEnvironmentDictionary = configurationDictionary[activeConfiguration.rawValue] as? NSDictionary
                else {
                    fatalError("Configuration Error")

            }
            self.activeConfiguration = activeConfiguration
            self.activeConfigurationDictionary = activeEnvironmentDictionary
        }

        // MARK: Methods

        func value(for key: ConfigurationKey) -> String {
            guard let value = activeConfigurationDictionary[key.rawValue] as? String else {
                fatalError("No value satysfying requirements")
            }
            return value
        }

        func isRunning(in configuration: Configuration) -> Bool {
            return activeConfiguration == configuration
        }
    }
    """#

    init(configurations: [Configuration], configurationKey: String) {
        var configurationsString = ""
        var configurationsKeysString = ""
        var allKeys = Set<String>()
        for configuration in configurations {
            configurationsString += "case \(configuration.name)\n\t\t"
            allKeys = allKeys.union(configuration.allKeys)
        }
        for key in allKeys {
            configurationsKeysString += "case \(key)\n\t\t"
        }
        self.configurationsString = configurationsString
        self.configurationsKeysString = configurationsKeysString
        self.configurationKey = configurationKey
    }
}
